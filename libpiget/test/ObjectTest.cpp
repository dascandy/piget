#include "catch2/catch_all.hpp"
#include "piget/GitCAM.hpp"
#include "piget/Object.hpp"

namespace Piget {

TEST_CASE("Convert file to GitCAM object") {
  Object obj("libpiget/test/hello.txt");
  static const std::vector<uint8_t> correctObject = { 0x62, 0x6c, 0x6f, 0x62, 0x20, 0x36, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0a };

  SECTION("Object is correct") {
    REQUIRE(correctObject == obj.buffer);
    REQUIRE(obj.type() == Object::Type::Object);
    std::vector<uint8_t> correctData = { 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0a };
    REQUIRE(std::vector<uint8_t>(obj.data().data(), obj.data().data() + obj.data().size()) == correctData);
  }

  auto objhash = obj.id();
  SECTION("Object hash is correct") {
    std::array<uint8_t,20> correctHash = { 
      0xce, 0x01, 0x36, 0x25, 0x03, 0x0b, 0xa8, 0xdb, 0xa9, 0x06, 0xf7, 0x56, 0x96, 0x7f, 0x9e, 0x9c, 0xa3, 0x94, 0x46, 0x4a, 
    };
    REQUIRE(correctHash == objhash);

    SECTION("Directory is correct") {
      static const std::vector<uint8_t> correctDirectory = { 
        0x74, 0x72, 0x65, 0x65, 0x20, 0x37, 0x34, 0x00, 
        0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74, 0x00, 
        0xce, 0x01, 0x36, 0x25, 0x03, 0x0b, 0xa8, 0xdb, 0xa9, 0x06, 0xf7, 0x56, 0x96, 0x7f, 0x9e, 0x9c, 0xa3, 0x94, 0x46, 0x4a, 
        0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x00, 
        0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
      };
      std::array<uint8_t,20> worldhash = {
        0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
      };
      Object dir(Tree{std::vector<DirEntry>{
        DirEntry{0100644, "hello.txt", objhash},
        DirEntry{0100644, "world.txt", worldhash},
        }});
      REQUIRE(correctDirectory == dir.buffer);
      REQUIRE(dir.type() == Object::Type::Tree);

      Object obj2(dir.readAsTree());
      REQUIRE(obj2.buffer == dir.buffer);
    }
  }

  SECTION("Commit is correct") {
    std::array<uint8_t,20> correctHash = { 
      0xce, 0x01, 0x36, 0x25, 0x03, 0x0b, 0xa8, 0xdb, 0xa9, 0x06, 0xf7, 0x56, 0x96, 0x7f, 0x9e, 0x9c, 0xa3, 0x94, 0x46, 0x4a, 
    };
    UserWithTime me{ { "Peter", "peter.bindels@tomtom.com" }, 1664781426, 200 };
    Object obj(Commit(correctHash, me).setMessage("fixed\n"));
    static const std::vector<uint8_t> correctCommit = {
        0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x31, 0x37, 0x30, 0x00,

        0x74, 0x72, 0x65, 0x65, 0x20, 
        0x63, 0x65, 0x30, 0x31, 0x33, 0x36, 0x32, 0x35, 0x30, 0x33, 0x30, 0x62, 0x61, 0x38, 0x64, 0x62, 0x61, 0x39, 0x30, 0x36,
        0x66, 0x37, 0x35, 0x36, 0x39, 0x36, 0x37, 0x66, 0x39, 0x65, 0x39, 0x63, 0x61, 0x33, 0x39, 0x34, 0x34, 0x36, 0x34, 0x61, 0x0a,

        0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x50, 0x65, 0x74, 0x65, 0x72, 0x20, 
        0x3c, 0x70, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x73, 0x40, 0x74, 0x6f, 0x6d, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x20, 
        0x31, 0x36, 0x36, 0x34, 0x37, 0x38, 0x31, 0x34, 0x32, 0x36, 0x20, 0x2b, 0x30, 0x32, 0x30, 0x30, 0x0a,

        0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x20, 0x50, 0x65, 0x74, 0x65, 0x72, 0x20, 
        0x3c, 0x70, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x6c, 0x73, 0x40, 0x74, 0x6f, 0x6d, 0x74, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x20, 
        0x31, 0x36, 0x36, 0x34, 0x37, 0x38, 0x31, 0x34, 0x32, 0x36, 0x20, 0x2b, 0x30, 0x32, 0x30, 0x30, 0x0a, 0x0a,

        0x66, 0x69, 0x78, 0x65, 0x64, 0x0a,
    };
    REQUIRE(obj.buffer == correctCommit);
    REQUIRE(obj.type() == Object::Type::Commit);
    Object obj2(obj.readAsCommit());
    REQUIRE(obj2.buffer == obj.buffer);
  }
}

TEST_CASE("Directory entry length cornercase") {
  SECTION("ninety-nine") {
    static const std::vector<uint8_t> correctDirectory = { 
      0x74, 0x72, 0x65, 0x65, 0x20, 0x39, 0x39, 0x00, 
      0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74, 0x00, 
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
      0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x00, 
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
    };
    std::array<uint8_t,20> worldhash = {
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
    };
    Object dir(Tree{std::vector<DirEntry>{
      DirEntry{0100644, "hello.txt", worldhash},
      DirEntry{0100644, "aaaaaaaaaaaaaaaaaaaaaaaaaworld.txt", worldhash},
      }});
    REQUIRE(correctDirectory == dir.buffer);
  }

  SECTION("one hundred") {
    static const std::vector<uint8_t> correctDirectory = { 
      0x74, 0x72, 0x65, 0x65, 0x20, 0x31, 0x30, 0x30, 0x00, 
      0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78, 0x74, 0x00, 
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
      0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x74, 0x78, 0x74, 0x00, 
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
    };
    std::array<uint8_t,20> worldhash = {
      0xcc, 0x62, 0x8c, 0xcd, 0x10, 0x74, 0x2b, 0xae, 0xa8, 0x24, 0x1c, 0x59, 0x24, 0xdf, 0x99, 0x2b, 0x5c, 0x01, 0x9f, 0x71, 
    };
    Object dir(Tree{std::vector<DirEntry>{
      DirEntry{0100644, "hello.txt", worldhash},
      DirEntry{0100644, "aaaaaaaaaaaaaaaaaaaaaaaaaaworld.txt", worldhash},
      }});
    REQUIRE(correctDirectory == dir.buffer);
  }
}

}

